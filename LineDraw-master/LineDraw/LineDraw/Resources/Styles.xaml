<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:conv="clr-namespace:LineDraw.Converters"
                    xmlns:mod="clr-namespace:LineDraw.Models"
                    xmlns:ext="clr-namespace:LineDraw.External"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Colors -->
    <Color x:Key="DisplayForegroundColor">#FF9BCA26</Color>
    <Color x:Key="DisplayForegroundGlowColor">#FFDEFB90</Color>
    <Color x:Key="DisplayErrorColor">#FFFF642C</Color>
    <Color x:Key="DisplayBusyColor">#FFFFF300</Color>
    <!-- Brushes -->
    <RadialGradientBrush x:Key="DisplayBackgroundBrush" RadiusX="0.65" RadiusY="0.8" Center="0.5,0.5" GradientOrigin="0.5,0.5">
        <RadialGradientBrush.GradientStops>
            <GradientStop Color="#FF003F00" Offset="0.306977"/>
            <GradientStop Color="#FF003200" Offset="0.549037"/>
            <GradientStop Color="#FF002600" Offset="0.70"/>
            <GradientStop Color="#FF001900" Offset="1"/>
        </RadialGradientBrush.GradientStops>
    </RadialGradientBrush>
    <SolidColorBrush x:Key="DisplayForegroundBrush" Color="{StaticResource DisplayForegroundColor}" />
    <SolidColorBrush x:Key="DisplayForegroundGlowBrush" Color="{StaticResource DisplayForegroundGlowColor}" />
    <SolidColorBrush x:Key="DisplayBusyBrush" Color="{StaticResource DisplayBusyColor}" />
    <LinearGradientBrush x:Key="MainBackgroundBorderBrush" EndPoint="0,0" StartPoint="1,1">
        <GradientStop Color="#FFA8ACB6"/>
        <GradientStop Color="#FF747C8D" Offset="0.5"/>
        <GradientStop Color="#FF464646" Offset="0.5"/>
        <GradientStop Color="#FF191919" Offset="1"/>
    </LinearGradientBrush>
    <VisualBrush x:Key="MainBackgroundBrush" TileMode="None">
        <VisualBrush.Visual>
            <Image Source="pack://application:,,,/LineDraw;component/Resources/background.jpg" />
        </VisualBrush.Visual>
    </VisualBrush>
    <SolidColorBrush x:Key="MainForegroundBrush" Color="White" />
    <RadialGradientBrush x:Key="ButtonBackgroundBrush" RadiusX="0.50" RadiusY="0.50" Center="0.46,0.36" GradientOrigin="0.40,0.36">
        <RadialGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0"/>
            <GradientStop Color="#FFB5B5B5" Offset="0.39"/>
            <GradientStop Color="#FF6C6B6B" Offset="1"/>
        </RadialGradientBrush.GradientStops>
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="ButtonBorderBrush" RadiusX="1.00959" RadiusY="1.00409" Center="0.310959,0.352055" GradientOrigin="0.310959,0.352055">
        <RadialGradientBrush.GradientStops>
            <GradientStop Color="#FF737373" Offset="0"/>
            <GradientStop Color="#FF393939" Offset="0.49569"/>
            <GradientStop Color="#FF000000" Offset="1"/>
        </RadialGradientBrush.GradientStops>
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="ButtonPressedBrush" RadiusX="0.504795" RadiusY="0.502044" Center="0.463014,0.364384" GradientOrigin="0.463014,0.364384">
        <RadialGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0"/>
            <GradientStop Color="#FFB5B5B5" Offset="0.312779"/>
            <GradientStop Color="#FF6C6B6B" Offset="0.797414"/>
        </RadialGradientBrush.GradientStops>
    </RadialGradientBrush>

    <!-- Default message for message display -->
    <sys:String x:Key="DefaultMessage">
        Select a pathfinding algorithm then click two points on the main display to draw non-intersecting lines.
    </sys:String>

    <!-- Converters -->
    <conv:PointsConverter x:Key="PointsConverter" />
    <conv:EnumToBooleanConverter x:Key="EnumToBoolConverter" />

    <!-- Display border brush style-->
    <Style TargetType="{x:Type Border}" x:Key="DisplayBorderStyle">
        <Setter Property="BorderBrush" Value="{StaticResource MainBackgroundBorderBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="3" />
    </Style>

    <!-- Button style -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Height="{TemplateBinding Height}"
                          Width="{TemplateBinding Width}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02" />
                                    <VisualTransition GeneratedDuration="0"
                                  To="Pressed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Highlight">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Pusher">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Pushed">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ColorAnimation Storyboard.TargetProperty="Stroke.Color"
                                                        Storyboard.TargetName="Highlight" 
                                                        To="{StaticResource DisplayForegroundColor}" 
                                                        Duration="0"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Highlight">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Pusher"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse Name="Border"
                                 Stroke="{TemplateBinding BorderBrush}" 
                                 StrokeThickness="5" />
                        <Ellipse Name="Highlight"
                                 Stroke="{StaticResource DisplayBusyBrush}" 
                                 StrokeThickness="1"
                                 Visibility="Hidden">
                            <Ellipse.Effect>
                                <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="3" 
                                  ShadowDepth="0" />
                            </Ellipse.Effect>
                        </Ellipse>
                        <Ellipse Name="Pusher"
                                 Stroke="Transparent"
                                 StrokeThickness="3"
                                 Fill="{TemplateBinding Background}" />
                        <Ellipse Name="Pushed"                                 
                                 Stroke="Transparent"
                                 StrokeThickness="5"
                                 Fill="{StaticResource ButtonPressedBrush}"
                                 Visibility="Hidden"/>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Radio button style -->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator >
                        <BulletDecorator.Bullet>
                            <Grid Height="15" Width="15">
                                <Ellipse Name="Border"
                                 Stroke="{StaticResource ButtonBorderBrush}" 
                                 StrokeThickness="5" />
                                <Ellipse Name="Highlight"
                                 Stroke="{StaticResource DisplayBusyBrush}" 
                                 StrokeThickness="1"
                                 Visibility="Hidden">
                                    <Ellipse.Effect>
                                        <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="3" 
                                  ShadowDepth="0" />
                                    </Ellipse.Effect>
                                </Ellipse>
                                <Ellipse Name="Check"
                                 Stroke="{StaticResource DisplayForegroundBrush}" 
                                 StrokeThickness="1"
                                 Visibility="Hidden">
                                    <Ellipse.Effect>
                                        <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="3" 
                                  ShadowDepth="0" />
                                    </Ellipse.Effect>
                                </Ellipse>
                                <Ellipse Name="Pusher"
                                 Stroke="Transparent"
                                 StrokeThickness="3"
                                 Fill="{StaticResource ButtonBackgroundBrush}" />
                                <Ellipse Name="Pushed"                                 
                                 Stroke="Transparent"
                                 StrokeThickness="5"
                                 Fill="{StaticResource ButtonPressedBrush}"
                                 Visibility="Hidden"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02" />
                                    <VisualTransition GeneratedDuration="0" To="Pressed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Highlight">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Pusher">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Pushed">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Highlight">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Pusher"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Pusher">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Pushed">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Check">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused" />
                                <VisualState x:Name="InvalidFocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter VerticalAlignment="Top"
                                          HorizontalAlignment="Center"
                                          RecognizesAccessKey="True"/>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Display TextBlock style -->
    <Style TargetType="{x:Type TextBlock}" x:Key="DisplayTextBlockStyle">
        <Setter Property="FontFamily" Value="pack://application:,,,/LineDraw;component/Resources/#digital-7" />
        <Setter Property="Foreground" Value="{StaticResource DisplayForegroundBrush}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="3" 
                                  ShadowDepth="0" />
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBlock style with shadow-->
    <Style x:Key="ShadowedTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black"
                                          BlurRadius="2" 
                                          ShadowDepth="0" />
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Data template for lines -->
    <DataTemplate x:Key="LineItemDataTemplate">
        <Polyline Stroke="{StaticResource DisplayForegroundBrush}"                  
                  StrokeThickness="1" 
                  Points="{Binding Mode=OneWay, Converter={StaticResource PointsConverter}}">
            <Polyline.Effect>
                <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="5" 
                                  ShadowDepth="0" />
            </Polyline.Effect>
        </Polyline>
    </DataTemplate>

    <!-- Data template for start and end point -->
    <DataTemplate x:Key="PointContentDataTemplate">
        <Canvas>
            <Ellipse Name="StartPoint"
                     Fill="{StaticResource DisplayForegroundBrush}"
                     Height="4"
                     Width="4">
                <Ellipse.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="{Binding DataContext.StartPoint.X, Mode=OneWay,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                        Y="{Binding DataContext.StartPoint.Y, Mode=OneWay,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                        <TranslateTransform X="-2" Y="-2"/>
                    </TransformGroup>
                </Ellipse.RenderTransform>
                <Ellipse.Effect>
                    <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="5" 
                                  ShadowDepth="0" />
                </Ellipse.Effect>
            </Ellipse>
            <Ellipse Name="EndPoint"
                 Fill="{StaticResource DisplayForegroundBrush}"
                 Height="4"
                 Width="4">
                <Ellipse.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="{Binding DataContext.EndPoint.X, Mode=OneWay,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                        Y="{Binding DataContext.EndPoint.Y, Mode=OneWay,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                        <TranslateTransform X="-2" Y="-2"/>
                    </TransformGroup>
                </Ellipse.RenderTransform>
                <Ellipse.Effect>
                    <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                  BlurRadius="5" 
                                  ShadowDepth="0" />
                </Ellipse.Effect>
            </Ellipse>
        </Canvas>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.StartPoint, 
                RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                <Setter TargetName="StartPoint" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.EndPoint, 
                RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                <Setter TargetName="EndPoint" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Data template for error message -->
    <DataTemplate x:Key="ErrorMessageDataTemplate">
        <TextBlock Text="{Binding}" 
                   Foreground="Red"
                   FontSize="14"/>
    </DataTemplate>

    <!-- Data template for pathfinding algorithm-->
    <DataTemplate x:Key="PathAlgorithmDataTemplate">
        <UniformGrid SnapsToDevicePixels="False" Columns="3">
            <!-- A* -->
            <StackPanel>
                <Label HorizontalAlignment="Center">
                    <TextBlock Foreground="{StaticResource MainForegroundBrush}"
                               Style="{StaticResource ShadowedTextBlockStyle}" 
                               Text="A*" />
                </Label>
                <RadioButton HorizontalAlignment="Center" 
                             Foreground="{StaticResource MainForegroundBrush}"
                         IsChecked="{Binding Path=DataContext.PathAlgorithm,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                Converter={StaticResource EnumToBoolConverter}, 
                ConverterParameter={x:Static mod:PathAlgorithm.AStar}}" />
            </StackPanel>
            <!-- BFS -->
            <StackPanel>
                <Label HorizontalAlignment="Center">
                    <TextBlock Foreground="{StaticResource MainForegroundBrush}"
                               Style="{StaticResource ShadowedTextBlockStyle}" 
                               Text="BFS" />
                </Label>
                <RadioButton HorizontalAlignment="Center"
                             Foreground="{StaticResource MainForegroundBrush}"
                         IsChecked="{Binding Path=DataContext.PathAlgorithm,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                Converter={StaticResource EnumToBoolConverter}, 
                ConverterParameter={x:Static mod:PathAlgorithm.BFS}}" />
            </StackPanel>
            <!-- Dijkstra -->
            <StackPanel>
                <Label HorizontalAlignment="Center">
                    <TextBlock Foreground="{StaticResource MainForegroundBrush}"
                               Style="{StaticResource ShadowedTextBlockStyle}" 
                               Text="Dijkstra" />
                </Label>
                <RadioButton HorizontalAlignment="Center" 
                             Foreground="{StaticResource MainForegroundBrush}"
                         IsChecked="{Binding Path=DataContext.PathAlgorithm,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                Converter={StaticResource EnumToBoolConverter}, 
                ConverterParameter={x:Static mod:PathAlgorithm.Dijkstra}}" />
            </StackPanel>
        </UniformGrid>
    </DataTemplate>

    <!-- Data template for message display -->
    <DataTemplate x:Key="MessageDisplayDataTemplate">
        <Border Background="{StaticResource DisplayBackgroundBrush}"
                Style="{StaticResource DisplayBorderStyle}" Padding="5">
            <Grid>
                <!--Message field-->
                <TextBlock Text="{Binding ErrorMessage, TargetNullValue={StaticResource DefaultMessage}}"
                           DockPanel.Dock="Top"
                           HorizontalAlignment="Left"
                           Style="{StaticResource DisplayTextBlockStyle}"
                           TextWrapping="Wrap"/>
                <!--Time feedback-->
                <StackPanel HorizontalAlignment="Left"
                            VerticalAlignment="Bottom"
                            Orientation="Horizontal">
                    <TextBlock Name="TimeLabel"
                               Text="TIME: "
                               Style="{StaticResource DisplayTextBlockStyle}"/>
                    <TextBlock Text="{Binding TimeMessage}"
                           Style="{StaticResource DisplayTextBlockStyle}"/>
                </StackPanel>
                <!-- Status indicator-->
                <StackPanel HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Orientation="Horizontal"
                            ext:StateManager.VisualStateProperty="{Binding State}">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup Name="{x:Static mod:CanvasState.GroupName}">
                            <VisualStateGroup.Transitions>
                                <VisualTransition GeneratedDuration="00:00:00.1">
                                </VisualTransition>
                            </VisualStateGroup.Transitions>
                            <VisualState Name="{x:Static mod:CanvasState.ErrorState}">
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="Indicator" 
                                                     Storyboard.TargetProperty="Fill.Color" 
                                                     To="{StaticResource DisplayErrorColor}" />
                                    <StringAnimationUsingKeyFrames Storyboard.TargetName="StatusText"
                                                                   Storyboard.TargetProperty="Text">
                                        <DiscreteStringKeyFrame Value="ERROR" KeyTime="0:0:0" />
                                    </StringAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState Name="{x:Static mod:CanvasState.BusyState}">
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="Indicator" 
                                                     Storyboard.TargetProperty="Fill.Color" 
                                                     To="{StaticResource DisplayBusyColor}" />
                                    <StringAnimationUsingKeyFrames Storyboard.TargetName="StatusText"
                                                                   Storyboard.TargetProperty="Text">
                                        <DiscreteStringKeyFrame Value="BUSY" KeyTime="0:0:0" />
                                    </StringAnimationUsingKeyFrames>
                                    <DoubleAnimation Storyboard.TargetName="Indicator"
                                                     Storyboard.TargetProperty="Opacity"
                                                     Duration="00:00:00.2"
                                                     From="1" To="0.35" RepeatBehavior="Forever" AutoReverse="True"/>
                                </Storyboard>
                            </VisualState>
                            <VisualState Name="{x:Static mod:CanvasState.ReadyState}">
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="Indicator" 
                                                     Storyboard.TargetProperty="Fill.Color" 
                                                     To="{StaticResource DisplayForegroundColor}" />
                                    <StringAnimationUsingKeyFrames Storyboard.TargetName="StatusText"
                                                                   Storyboard.TargetProperty="Text">
                                        <DiscreteStringKeyFrame Value="READY" KeyTime="0:0:0" />
                                    </StringAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <TextBlock Name="StatusText"
                               Text="Ready"
                               Margin="5,0,5,0"
                               Style="{StaticResource DisplayTextBlockStyle}"/>
                    <Ellipse Name="Indicator" 
                             Height="7" 
                             Width="7"
                             Fill="{StaticResource DisplayForegroundBrush}"
                             Margin="2">
                        <Ellipse.Effect>
                            <DropShadowEffect Color="{StaticResource DisplayForegroundGlowColor}"
                                          BlurRadius="5" 
                                          ShadowDepth="0" />
                        </Ellipse.Effect>
                    </Ellipse>
                </StackPanel>
            </Grid>
        </Border>
    </DataTemplate>

    <!-- Data template for Reset & Power button -->
    <DataTemplate x:Key="MainButtonsTemplate">
        <DockPanel HorizontalAlignment="Stretch">
            <StackPanel DockPanel.Dock="Left">
                <Label HorizontalAlignment="Center"
                           IsTabStop="False">
                    <TextBlock Foreground="{StaticResource MainForegroundBrush}"
                               Style="{StaticResource ShadowedTextBlockStyle}" 
                               Text="Power" />
                </Label>
                <Button Command="{Binding ApplicationCloseCommand}"
                            Background="{StaticResource ButtonBackgroundBrush}"
                            BorderBrush="{StaticResource ButtonBorderBrush}"
                            Height="20"
                            Width="20" />
            </StackPanel>
            <StackPanel DockPanel.Dock="Right" HorizontalAlignment="Right">
                <Label HorizontalAlignment="Center"
                       IsTabStop="False">
                    <TextBlock Foreground="{StaticResource MainForegroundBrush}"
                               Style="{StaticResource ShadowedTextBlockStyle}" 
                               Text="Reset" />
                </Label>
                <Button Command="{Binding ClearLinesCommand}"
                            Background="{StaticResource ButtonBackgroundBrush}"
                            BorderBrush="{StaticResource ButtonBorderBrush}"
                            Height="20"
                            Width="20" />
            </StackPanel>
        </DockPanel>
    </DataTemplate>
</ResourceDictionary>